# Configuration presets:
# - For quick testing: episodes=1, parallel=5, lr=0.0001
# - For development: episodes=50, parallel=20, lr=0.0003  
# - For production: episodes=1000, parallel=100, lr=0.0003

# Training parameters
episodes: 10000  # Number of episodes to train (1=test, 50=dev, 1000=production)
lr: 0.0003    # Learning rate (0.0001=conservative, 0.0003=standard, 0.001=aggressive)
batch_size: 4096
buffer_capacity: 800000
gamma: 0.997
gae_lambda: 0.95
clip_range: 0.2
value_coef: 0.6
entropy_coef: 0.05
ppo_epochs: 4
algorithm: ppo
reward: composite
reward_config: config/reward.yaml

# Training configuration
parallel: 1              # Parallel environments (5=test, 20=dev, 100=production)
checkpoint_interval: 500  # Save checkpoint every N episodes
checkpoint_dir: "checkpoints"
tensorboard: true

# Model loading configuration
reset_optimizer: false  # Reset optimizer state when loading a model (useful for device changes)

# Team configuration
team: "random"           # Options: default, random
teams_dir: "config/teams"  # Directory for random team mode

# Opponent configuration
opponent: self           # Single opponent type: random, max, rule, self
opponent_mix: null       # Mixed opponents (e.g., "random:0.3,max:0.3,self:0.4")

# Self-play win rate based opponent update
win_rate_threshold: 0.65  # Win rate threshold for updating opponent (0.6-0.8 recommended)
win_rate_window: 100       # Number of recent battles to track

# League Training configuration (prevents catastrophic forgetting)
league_training:
  enabled: true            # Enable league training (vs historical opponents)
  historical_ratio: 0.3    # Ratio of battles against historical opponents (0.0-1.0)
  max_historical: 5        # Maximum number of historical snapshots to keep
  
  # Historical opponent selection method:
  # - "uniform": Random selection from all historical opponents (equal probability)
  #   Example: snapshots [1,2,3,4,5] → each has 20% selection chance
  # - "recent": Prefer recent historical opponents (50% from newest half)
  #   Example: snapshots [1,2,3,4,5] → [4,5] are preferred, [1,2,3] less likely
  # - "weighted": Weight by recency (newer opponents have higher selection probability)
  #   Example: snapshots [1,2,3,4,5] → weights [1,2,3,4,5], so 5 is 5x more likely than 1
  selection_method: "recent"
  
  # Recommended settings:
  # - Early training: uniform (explore all historical strategies)
  # - Stable training: recent (focus on recent improvements)
  # - Fine-tuning: weighted (gradual transition from old to new)

# Model management
load_model: null  # Path to model file to resume training from
save_model: null  # Path to save final model

# Network architecture configuration  
network:
  type: "attention"  # Options: basic, lstm, attention, embedding
  hidden_size: 256
  use_2layer: true
  use_lstm: true
  use_attention: true   # Enable attention mechanism
  lstm_hidden_size: 256
  attention_heads: 8    # More attention heads for complex patterns
  attention_dropout: 0.1
  
  # Pokemon Species Embedding Configuration (only used when type: "embedding")
  embedding_config:
    embed_dim: 32  # Embedding dimension (must be >= 6 for base stats)
    vocab_size: 1026  # 0 (unknown) + 1025 (Pokemon species)
    freeze_base_stats: true  # Whether to freeze base stats dimensions during training
    
    # Species indices in state vector (automatically detected if not provided)
    # Indices 836-847: my_team[0-5].species_id + opp_team[0-5].species_id
    species_indices: [836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847]

# Sequence learning configuration
sequence_learning:
  enabled: true    # Enable sequence-based learning for LSTM
  bptt_length: 0  # Truncated BPTT length (0=full episode, 50=recommended for long episodes)
  grad_clip_norm: 5.0  # Gradient clipping norm (2.0=conservative, 5.0=standard, 10.0=aggressive)

# Scheduler configuration
scheduler:
  enabled: false  # Enable learning rate scheduler
  type: "step"    # Options: step, exponential, cosine, reduce_on_plateau
  
  # StepLR configuration
  step_size: 1000  # Number of episodes between LR reductions
  gamma: 0.9       # Multiplicative factor for LR decay
  
  # ExponentialLR configuration (when type: "exponential")
  # gamma: 0.99     # Decay factor per episode
  
  # CosineAnnealingLR configuration (when type: "cosine")
  # T_max: 1000     # Maximum number of episodes for cosine cycle
  # eta_min: 0      # Minimum learning rate
  
  # ReduceLROnPlateau configuration (when type: "reduce_on_plateau")
  # mode: "min"     # "min" for loss, "max" for reward
  # factor: 0.5     # Factor by which LR will be reduced
  # patience: 10    # Number of episodes with no improvement after which LR will be reduced
  # verbose: true   # Print message when LR is reduced
