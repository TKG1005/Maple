my_active:
  active_level:
    dtype: int
    battle_path: battle.active_pokemon.level
    encoder: onehot
    default: '50'
    range:
    - 0
    - 100
    scale_to:
    - 0
    - 1
  active_base_stats_HP:
    dtype: int
    battle_path: battle.active_pokemon.stats["hp"]
    encoder: onehot
    default: '0'
    range:
    - 0
    - 362
    scale_to:
    - 0
    - 1
  active_base_stats_atk:
    dtype: int
    battle_path: battle.active_pokemon.stats["atk"]
    encoder: onehot
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  active_base_stats_def:
    dtype: int
    battle_path: battle.active_pokemon.stats["def"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  active_base_stats_spa:
    dtype: int
    battle_path: battle.active_pokemon.stats["spa"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  active_base_stats_spd:
    dtype: int
    battle_path: battle.active_pokemon.stats["spd"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  active_base_stats_spe:
    dtype: int
    battle_path: battle.active_pokemon.stats["spe"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  active_boosts_akt:
    dtype: int
    battle_path: battle.active_pokemon.boosts['atk']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  active_boosts_def:
    dtype: int
    battle_path: battle.active_pokemon.boosts['def']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  active_boosts_spa:
    dtype: int
    battle_path: battle.active_pokemon.boosts['spa']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  active_boosts_spd:
    dtype: int
    battle_path: battle.active_pokemon.boosts['spd']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  active_boosts_spe:
    dtype: int
    battle_path: battle.active_pokemon.boosts['spe']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  active_boosts_acc:
    dtype: int
    battle_path: battle.active_pokemon.boosts['accuracy']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  active_boosts_eve:
    dtype: int
    battle_path: battle.active_pokemon.boosts['evasion']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  active_current_hp_frac:
    dtype: float
    battle_path: active.current_hp_fraction
    encoder: identity
    default: '1'
  active_is_fainted:
    dtype: bool
    battle_path: battle.active_pokemon.fainted
    encoder: identity
    default: '0'
  active_move1_type:
    dtype: pkemontype
    battle_path: active_sorted_moves[0].type.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  active_move1_base_power:
    dtype: int
    battle_path: active_sorted_moves[0].base_power
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  active_move1_acc:
    dtype: float
    battle_path: active_sorted_moves[0].accuracy
    encoder: identity
    default: '0'
  active_move1_class:
    dtype: movecategory
    battle_path: active_sorted_moves[0].category.name.lower()
    encoder: onehot
    default: '[0,0,0]'
    classes:
    - physical
    - special
    - status
  active_move1_max_pp:
    dtype: int
    battle_path: active_sorted_moves[0].max_pp
    encoder: identity
    default: '0'
  active_move1_pp_frac:
    dtype: float
    battle_path: active_sorted_moves[0].current_pp / active_sorted_moves[0].max_pp
      if active_sorted_moves[0] and active_sorted_moves[0].max_pp > 0 else 0
    encoder: identity
    default: '0'
  active_move1_pp_is_one:
    dtype: bool
    battle_path: active_sorted_moves[0].current_pp == 1 if active_sorted_moves[0]
      else False
    encoder: identity
    default: '0'
  active_move2_type:
    dtype: pkemontype
    battle_path: active_sorted_moves[1].type.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  active_move2_base_power:
    dtype: int
    battle_path: active_sorted_moves[1].base_power
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  active_move2_acc:
    dtype: float
    battle_path: active_sorted_moves[1].accuracy
    encoder: identity
    default: '0'
  active_move2_class:
    dtype: movecategory
    battle_path: active_sorted_moves[1].category.name.lower()
    encoder: onehot
    default: '[0,0,0]'
    classes:
    - physical
    - special
    - status
  active_move2_max_pp:
    dtype: int
    battle_path: active_sorted_moves[1].max_pp
    encoder: identity
    default: '0'
  active_move2_pp_frac:
    dtype: float
    battle_path: active_sorted_moves[1].current_pp / active_sorted_moves[1].max_pp
      if active_sorted_moves[1] and active_sorted_moves[1].max_pp > 0 else 0
    encoder: identity
    default: '0'
  active_move2_pp_is_one:
    dtype: bool
    battle_path: active_sorted_moves[1].current_pp == 1 if active_sorted_moves[1]
      else False
    encoder: identity
    default: '0'
  active_move3_type:
    dtype: pkemontype
    battle_path: active_sorted_moves[2].type.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  active_move3_base_power:
    dtype: int
    battle_path: active_sorted_moves[2].base_power
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  active_move3_acc:
    dtype: float
    battle_path: active_sorted_moves[2].accuracy
    encoder: identity
    default: '0'
  active_move3_class:
    dtype: movecategory
    battle_path: active_sorted_moves[2].category.name.lower()
    encoder: onehot
    default: '[0,0,0]'
    classes:
    - physical
    - special
    - status
  active_move3_max_pp:
    dtype: int
    battle_path: active_sorted_moves[2].max_pp
    encoder: identity
    default: '0'
  active_move3_pp_frac:
    dtype: float
    battle_path: active_sorted_moves[2].current_pp / active_sorted_moves[2].max_pp
      if active_sorted_moves[2] and active_sorted_moves[2].max_pp > 0 else 0
    encoder: identity
    default: '0'
  active_move3_pp_is_one:
    dtype: bool
    battle_path: active_sorted_moves[2].current_pp == 1 if active_sorted_moves[2]
      else False
    encoder: identity
    default: '0'
  active_move4_type:
    dtype: pkemontype
    battle_path: active_sorted_moves[3].type.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  active_move4_base_power:
    dtype: int
    battle_path: active_sorted_moves[3].base_power
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  active_move4_acc:
    dtype: float
    battle_path: active_sorted_moves[3].accuracy
    encoder: identity
    default: '0'
  active_move4_class:
    dtype: movecategory
    battle_path: active_sorted_moves[3].category.name.lower()
    encoder: onehot
    default: '[0,0,0]'
    classes:
    - physical
    - special
    - status
  active_move4_max_pp:
    dtype: int
    battle_path: active_sorted_moves[3].max_pp
    encoder: identity
    default: '0'
  active_move4_pp_frac:
    dtype: float
    battle_path: active_sorted_moves[3].current_pp / active_sorted_moves[3].max_pp
      if active_sorted_moves[3] and active_sorted_moves[3].max_pp > 0 else 0
    encoder: identity
    default: '0'
  active_move4_pp_is_one:
    dtype: bool
    battle_path: active_sorted_moves[3].current_pp == 1 if active_sorted_moves[3]
      else False
    encoder: identity
    default: '0'
  active_status:
    dtype: optional
    battle_path: battle.active_pokemon.status
    encoder: onehot
    default: '[1.0,0,0,0,0,0,0]'
    classes:
    - none
    - brn
    - fnt
    - frz
    - par
    - psn
    - slp
    - tox
  active_teratype:
    dtype: pokemontype(enum)
    battle_path: battle.active_pokemon.tera_type.name.lower() if battle.active_pokemon
      and battle.active_pokemon.tera_type else "none"
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  active_primary_type:
    dtype: pokemontype(enum)
    battle_path: battle.active_pokemon.type_1.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  active_secondary_type:
    dtype: pokemontype(enum)
    battle_path: battle.active_pokemon.type_2.name.lower() if battle.active_pokemon.type_2 else 'none'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
opp_active:
  opp_active_lebel:
    dtype: int
    battle_path: battle.opponent_active_pokemon.level
    encoder: onehot
    default: '50'
    range:
    - 0
    - 100
    scale_to:
    - 0
    - 1
  opp_active_boosts_akt:
    dtype: int
    battle_path: battle.opponent_active_pokemon.boosts['atk']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  opp_active_boosts_def:
    dtype: int
    battle_path: battle.opponent_active_pokemon.boosts['def']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  opp_active_boosts_spa:
    dtype: int
    battle_path: battle.opponent_active_pokemon.boosts['spa']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  opp_active_boosts_spd:
    dtype: int
    battle_path: battle.opponent_active_pokemon.boosts['spd']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  opp_active_boosts_spe:
    dtype: int
    battle_path: battle.opponent_active_pokemon.boosts['spe']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  opp_active_boosts_acc:
    dtype: int
    battle_path: battle.opponent_active_pokemon.boosts['accuracy']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  opp_active_boosts_eve:
    dtype: int
    battle_path: battle.opponent_active_pokemon.boosts['evasion']
    encoder: linear_scale
    default: '0'
    range:
    - -6
    - 6
    scale_to:
    - 0
    - 1
  opp_active_current_hp_frac:
    dtype: float
    battle_path: battle.opponent_active_pokemon.current_hp_fraction
    encoder: identity
    default: '1'
  opp_active_is_fainted:
    dtype: bool
    battle_path: battle.opponent_active_pokemon.fainted
    encoder: identity
    default: '0'
  opp_active_is_terastallized:
    dtype: bool
    battle_path: battle.opponent_active_pokemon.is_terastallized
    encoder: identity
    default: '0'
  opp_active_status:
    dtype: optional
    battle_path: battle.opponent_active_pokemon.status
    encoder: onehot
    default: '[1.0,0,0,0,0,0,0]'
    classes:
    - none
    - brn
    - fnt
    - frz
    - par
    - psn
    - slp
    - tox
  opp_active_teratype:
    dtype: pokemontype(enum)
    battle_path: battle.opponent_active_pokemon.tera_type.name.lower() if battle.opponent_active_pokemon
      and battle.opponent_active_pokemon.tera_type else "none"
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  opp_active_primary_type:
    dtype: pokemontype(enum)
    battle_path: battle.opponent_active_pokemon.type_1.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  opp_active_secondary_type:
    dtype: pokemontype(enum)
    battle_path: battle.opponent_active_pokemon.type_2.name.lower() if battle.opponent_active_pokemon and battle.opponent_active_pokemon.type_2 else 'none'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  opp_bench1_status:
    dtype: optional
    battle_path: opp_bench1.status
    encoder: onehot
    default: '[1.0,0,0,0,0,0,0]'
    classes:
    - none
    - brn
    - fnt
    - frz
    - par
    - psn
    - slp
    - tox
my_bench1:
  my_bench1_level:
    dtype: int
    battle_path: bench1.level
    encoder: onehot
    default: '50'
    range:
    - 0
    - 100
    scale_to:
    - 0
    - 1
  my_bench1_base_stats_HP:
    dtype: int
    battle_path: bench1.stats["hp"]
    encoder: onehot
    default: '0'
    range:
    - 0
    - 362
    scale_to:
    - 0
    - 1
  my_bench1_base_stats_atk:
    dtype: int
    battle_path: bench1.stats["atk"]
    encoder: onehot
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench1_base_stats_def:
    dtype: int
    battle_path: bench1.stats["def"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench1_base_stats_spa:
    dtype: int
    battle_path: bench1.stats["spa"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench1_base_stats_spd:
    dtype: int
    battle_path: bench1.stats["spd"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench1_base_stats_spe:
    dtype: int
    battle_path: bench1.stats["spe"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench1_current_hp_frac:
    dtype: float
    battle_path: bench1.current_hp_fraction
    encoder: identity
    default: '1'
  my_bench1_is_fainted:
    dtype: bool
    battle_path: bench1.fainted
    encoder: nan
    default: '0'
  my_bench1_is_terastallized:
    dtype: bool
    battle_path: bench1.is_terastallized
    encoder: identity
    default: '0'
  my_bench1_move1_type:
    dtype: pkemontype
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[0].type.name.lower()
      if bench1 and bench1.moves and len(bench1.moves) > 0 else "none"'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench1_move1_base_power:
    dtype: int
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[0].base_power
      if bench1 and bench1.moves and len(bench1.moves) > 0 else 0'
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  my_bench1_move1_acc:
    dtype: float
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[0].accuracy if
      bench1 and bench1.moves and len(bench1.moves) > 0 else 0'
    encoder: identity
    default: '0'
  my_bench1_move1_class:
    dtype: movecategory
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[0].category.name.lower()
      if bench1 and bench1.moves and len(bench1.moves) > 0 else "status"'
    encoder: onehot
    default: '[0,0,1]'
    classes:
    - physical
    - special
    - status
  my_bench1_move1_max_pp:
    dtype: int
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[0].max_pp if bench1
      and bench1.moves and len(bench1.moves) > 0 else 0'
    encoder: identity
    default: '0'
  my_bench1_move1_pp_frac:
    dtype: float
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[0].current_pp
      / sorted(bench1.moves.values(), key=lambda m: m.id)[0].max_pp if bench1 and
      bench1.moves and len(bench1.moves) > 0 and sorted(bench1.moves.values(), key=lambda
      m: m.id)[0].max_pp > 0 else 0'
    encoder: identity
    default: '0'
  my_bench1_move1_pp_is_one:
    dtype: bool
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[0].current_pp
      == 1 if bench1 and bench1.moves and len(bench1.moves) > 0 else False'
    encoder: identity
    default: '0'
  my_bench1_move2_type:
    dtype: pkemontype
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[1].type.name.lower()
      if bench1 and bench1.moves and len(bench1.moves) > 1 else "none"'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench1_move2_base_power:
    dtype: int
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[1].base_power
      if bench1 and bench1.moves and len(bench1.moves) > 1 else 0'
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  my_bench1_move2_acc:
    dtype: float
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[1].accuracy if
      bench1 and bench1.moves and len(bench1.moves) > 1 else 0'
    encoder: identity
    default: '0'
  my_bench1_move2_class:
    dtype: movecategory
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[1].category.name.lower()
      if bench1 and bench1.moves and len(bench1.moves) > 1 else "status"'
    encoder: onehot
    default: '[0,0,1]'
    classes:
    - physical
    - special
    - status
  my_bench1_move2_max_pp:
    dtype: int
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[1].max_pp if bench1
      and bench1.moves and len(bench1.moves) > 1 else 0'
    encoder: identity
    default: '0'
  my_bench1_move2_pp_frac:
    dtype: float
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[1].current_pp
      / sorted(bench1.moves.values(), key=lambda m: m.id)[1].max_pp if bench1 and
      bench1.moves and len(bench1.moves) > 1 and sorted(bench1.moves.values(), key=lambda
      m: m.id)[1].max_pp > 0 else 0'
    encoder: identity
    default: '0'
  my_bench1_move2_pp_is_one:
    dtype: bool
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[1].current_pp
      == 1 if bench1 and bench1.moves and len(bench1.moves) > 1 else False'
    encoder: identity
    default: '0'
  my_bench1_move3_type:
    dtype: pkemontype
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[2].type.name.lower()
      if bench1 and bench1.moves and len(bench1.moves) > 2 else "none"'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench1_move3_base_power:
    dtype: int
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[2].base_power
      if bench1 and bench1.moves and len(bench1.moves) > 2 else 0'
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  my_bench1_move3_acc:
    dtype: float
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[2].accuracy if
      bench1 and bench1.moves and len(bench1.moves) > 2 else 0'
    encoder: identity
    default: '0'
  my_bench1_move3_class:
    dtype: movecategory
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[2].category.name.lower()
      if bench1 and bench1.moves and len(bench1.moves) > 2 else "status"'
    encoder: onehot
    default: '[0,0,1]'
    classes:
    - physical
    - special
    - status
  my_bench1_move3_max_pp:
    dtype: int
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[2].max_pp if bench1
      and bench1.moves and len(bench1.moves) > 2 else 0'
    encoder: identity
    default: '0'
  my_bench1_move3_pp_frac:
    dtype: float
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[2].current_pp
      / sorted(bench1.moves.values(), key=lambda m: m.id)[2].max_pp if bench1 and
      bench1.moves and len(bench1.moves) > 2 and sorted(bench1.moves.values(), key=lambda
      m: m.id)[2].max_pp > 0 else 0'
    encoder: identity
    default: '0'
  my_bench1_move3_pp_is_one:
    dtype: bool
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[2].current_pp
      == 1 if bench1 and bench1.moves and len(bench1.moves) > 2 else False'
    encoder: identity
    default: '0'
  my_bench1_move4_type:
    dtype: pkemontype
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[3].type.name.lower()
      if bench1 and bench1.moves and len(bench1.moves) > 3 else "none"'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench1_move4_base_power:
    dtype: int
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[3].base_power
      if bench1 and bench1.moves and len(bench1.moves) > 3 else 0'
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  my_bench1_move4_acc:
    dtype: float
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[3].accuracy if
      bench1 and bench1.moves and len(bench1.moves) > 3 else 0'
    encoder: identity
    default: '0'
  my_bench1_move4_class:
    dtype: movecategory
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[3].category.name.lower()
      if bench1 and bench1.moves and len(bench1.moves) > 3 else "status"'
    encoder: onehot
    default: '[0,0,1]'
    classes:
    - physical
    - special
    - status
  my_bench1_move4_max_pp:
    dtype: int
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[3].max_pp if bench1
      and bench1.moves and len(bench1.moves) > 3 else 0'
    encoder: identity
    default: '0'
  my_bench1_move4_pp_frac:
    dtype: float
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[3].current_pp
      / sorted(bench1.moves.values(), key=lambda m: m.id)[3].max_pp if bench1 and
      bench1.moves and len(bench1.moves) > 3 and sorted(bench1.moves.values(), key=lambda
      m: m.id)[3].max_pp > 0 else 0'
    encoder: identity
    default: '0'
  my_bench1_move4_pp_is_one:
    dtype: bool
    battle_path: 'sorted(bench1.moves.values(), key=lambda m: m.id)[3].current_pp
      == 1 if bench1 and bench1.moves and len(bench1.moves) > 3 else False'
    encoder: identity
    default: '0'
  my_bench1_is_revealed:
    dtype: bool
    battle_path: bench1.revealed
    encoder: nan
    default: '0'
  my_bench1_status:
    dtype: optional
    battle_path: bench1.status
    encoder: onehot
    default: '[1.0,0,0,0,0,0,0]'
    classes:
    - none
    - brn
    - fnt
    - frz
    - par
    - psn
    - slp
    - tox
  my_bench1_teratype:
    dtype: pokemontype(enum)
    battle_path: bench1.tera_type.name.lower() if bench1 and bench1.tera_type else
      "none"
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench1_primary_type:
    dtype: pokemontype(enum)
    battle_path: bench1.type_1.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench1_secondary_type:
    dtype: pokemontype(enum)
    battle_path: bench1.type_2.name.lower() if bench1 and bench1.type_2 else 'none'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
my_bench2:
  my_bench2_level:
    dtype: int
    battle_path: bench2.level
    encoder: one-hot
    default: '50'
    range:
    - 0
    - 100
    scale_to:
    - 0
    - 1
  my_bench2_base_stats_HP:
    dtype: int
    battle_path: bench2.stats["hp"]
    encoder: onehot
    default: '0'
    range:
    - 0
    - 362
    scale_to:
    - 0
    - 1
  my_bench2_base_stats_atk:
    dtype: int
    battle_path: bench2.stats["atk"]
    encoder: onehot
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench2_base_stats_def:
    dtype: int
    battle_path: bench2.stats["def"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench2_base_stats_spa:
    dtype: int
    battle_path: bench2.stats["spa"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench2_base_stats_spd:
    dtype: int
    battle_path: bench2.stats["spd"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench2_base_stats_spe:
    dtype: int
    battle_path: bench2.stats["spe"]
    encoder: identity
    default: '0'
    range:
    - 0
    - 337
    scale_to:
    - 0
    - 1
  my_bench2_current_hp_frac:
    dtype: float
    battle_path: bench2.current_hp_fraction
    encoder: nan
    default: '1'
  my_bench2_is_fainted:
    dtype: bool
    battle_path: bench2.fainted
    encoder: nan
    default: '0'
  my_bench2_is_terastallized:
    dtype: bool
    battle_path: bench2.is_terastallized
    encoder: identity
    default: '0'
  my_bench2_move1_type:
    dtype: pkemontype
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[0].type.name.lower()
      if bench2 and bench2.moves and len(bench2.moves) > 0 else "none"'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench2_move1_base_power:
    dtype: int
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[0].base_power
      if bench2 and bench2.moves and len(bench2.moves) > 0 else 0'
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  my_bench2_move1_acc:
    dtype: float
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[0].accuracy if
      bench2 and bench2.moves and len(bench2.moves) > 0 else 0'
    encoder: identity
    default: '0'
  my_bench2_move1_class:
    dtype: movecategory
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[0].category.name.lower()
      if bench2 and bench2.moves and len(bench2.moves) > 0 else "status"'
    encoder: onehot
    default: '[0,0,1]'
    classes:
    - physical
    - special
    - status
  my_bench2_move1_max_pp:
    dtype: int
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[0].max_pp if bench2
      and bench2.moves and len(bench2.moves) > 0 else 0'
    encoder: identity
    default: '0'
  my_bench2_move1_pp_frac:
    dtype: float
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[0].current_pp
      / sorted(bench2.moves.values(), key=lambda m: m.id)[0].max_pp if bench2 and
      bench2.moves and len(bench2.moves) > 0 and sorted(bench2.moves.values(), key=lambda
      m: m.id)[0].max_pp > 0 else 0'
    encoder: identity
    default: '0'
  my_bench2_move1_pp_is_one:
    dtype: bool
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[0].current_pp
      == 1 if bench2 and bench2.moves and len(bench2.moves) > 0 else False'
    encoder: identity
    default: '0'
  my_bench2_move2_type:
    dtype: pkemontype
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[1].type.name.lower()
      if bench2 and bench2.moves and len(bench2.moves) > 1 else "none"'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench2_move2_base_power:
    dtype: int
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[1].base_power
      if bench2 and bench2.moves and len(bench2.moves) > 1 else 0'
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  my_bench2_move2_acc:
    dtype: float
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[1].accuracy if
      bench2 and bench2.moves and len(bench2.moves) > 1 else 0'
    encoder: identity
    default: '0'
  my_bench2_move2_class:
    dtype: movecategory
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[1].category.name.lower()
      if bench2 and bench2.moves and len(bench2.moves) > 1 else "status"'
    encoder: onehot
    default: '[0,0,1]'
    classes:
    - physical
    - special
    - status
  my_bench2_move2_max_pp:
    dtype: int
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[1].max_pp if bench2
      and bench2.moves and len(bench2.moves) > 1 else 0'
    encoder: identity
    default: '0'
  my_bench2_move2_pp_frac:
    dtype: float
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[1].current_pp
      / sorted(bench2.moves.values(), key=lambda m: m.id)[1].max_pp if bench2 and
      bench2.moves and len(bench2.moves) > 1 and sorted(bench2.moves.values(), key=lambda
      m: m.id)[1].max_pp > 0 else 0'
    encoder: identity
    default: '0'
  my_bench2_move2_pp_is_one:
    dtype: bool
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[1].current_pp
      == 1 if bench2 and bench2.moves and len(bench2.moves) > 1 else False'
    encoder: identity
    default: '0'
  my_bench2_move3_type:
    dtype: pkemontype
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[2].type.name.lower()
      if bench2 and bench2.moves and len(bench2.moves) > 2 else "none"'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench2_move3_base_power:
    dtype: int
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[2].base_power
      if bench2 and bench2.moves and len(bench2.moves) > 2 else 0'
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  my_bench2_move3_acc:
    dtype: float
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[2].accuracy if
      bench2 and bench2.moves and len(bench2.moves) > 2 else 0'
    encoder: identity
    default: '0'
  my_bench2_move3_class:
    dtype: movecategory
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[2].category.name.lower()
      if bench2 and bench2.moves and len(bench2.moves) > 2 else "status"'
    encoder: onehot
    default: '[0,0,1]'
    classes:
    - physical
    - special
    - status
  my_bench2_move3_max_pp:
    dtype: int
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[2].max_pp if bench2
      and bench2.moves and len(bench2.moves) > 2 else 0'
    encoder: identity
    default: '0'
  my_bench2_move3_pp_frac:
    dtype: float
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[2].current_pp
      / sorted(bench2.moves.values(), key=lambda m: m.id)[2].max_pp if bench2 and
      bench2.moves and len(bench2.moves) > 2 and sorted(bench2.moves.values(), key=lambda
      m: m.id)[2].max_pp > 0 else 0'
    encoder: identity
    default: '0'
  my_bench2_move3_pp_is_one:
    dtype: bool
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[2].current_pp
      == 1 if bench2 and bench2.moves and len(bench2.moves) > 2 else False'
    encoder: identity
    default: '0'
  my_bench2_move4_type:
    dtype: pkemontype
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[3].type.name.lower()
      if bench2 and bench2.moves and len(bench2.moves) > 3 else "none"'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench2_move4_base_power:
    dtype: int
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[3].base_power
      if bench2 and bench2.moves and len(bench2.moves) > 3 else 0'
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 255
    scale_to:
    - 0
    - 1
  my_bench2_move4_acc:
    dtype: float
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[3].accuracy if
      bench2 and bench2.moves and len(bench2.moves) > 3 else 0'
    encoder: identity
    default: '0'
  my_bench2_move4_class:
    dtype: movecategory
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[3].category.name.lower()
      if bench2 and bench2.moves and len(bench2.moves) > 3 else "status"'
    encoder: onehot
    default: '[0,0,1]'
    classes:
    - physical
    - special
    - status
  my_bench2_move4_max_pp:
    dtype: int
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[3].max_pp if bench2
      and bench2.moves and len(bench2.moves) > 3 else 0'
    encoder: identity
    default: '0'
  my_bench2_move4_pp_frac:
    dtype: float
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[3].current_pp
      / sorted(bench2.moves.values(), key=lambda m: m.id)[3].max_pp if bench2 and
      bench2.moves and len(bench2.moves) > 3 and sorted(bench2.moves.values(), key=lambda
      m: m.id)[3].max_pp > 0 else 0'
    encoder: identity
    default: '0'
  my_bench2_move4_pp_is_one:
    dtype: bool
    battle_path: 'sorted(bench2.moves.values(), key=lambda m: m.id)[3].current_pp
      == 1 if bench2 and bench2.moves and len(bench2.moves) > 3 else False'
    encoder: identity
    default: '0'
  my_bench2_is_revealed:
    dtype: bool
    battle_path: bench2.revealed
    encoder: nan
    default: '0'
  my_bench2_status:
    dtype: optional
    battle_path: bench2.status
    encoder: onehot
    default: '[1.0,0,0,0,0,0,0]'
    classes:
    - none
    - brn
    - fnt
    - frz
    - par
    - psn
    - slp
    - tox
  my_bench2_teratype:
    dtype: pokemontype(enum)
    battle_path: bench2.tera_type.name.lower() if bench2 and bench2.tera_type else
      "none"
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench2_primary_type:
    dtype: pokemontype(enum)
    battle_path: bench2.type_1.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  my_bench2_secondary_type:
    dtype: pokemontype(enum)
    battle_path: bench2.type_2.name.lower() if bench2 and bench2.type_2 else 'none'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
opp_bench1:
  opp_bench1_current_hp_frac:
    dtype: float
    battle_path: opp_bench1.current_hp_fraction
    encoder: identity
    default: '1'
  opp_bench1_is_fainted:
    dtype: bool
    battle_path: opp_bench1.fainted
    encoder: nan
    default: '0'
  opp_bench1_is_terastallized:
    dtype: bool
    battle_path: opp_bench1.is_terastallized
    encoder: identity
    default: '0'
  opp_bench1_is_revealed:
    dtype: bool
    battle_path: opp_bench2.revealed
    encoder: nan
    default: '0'
  opp_bench1_teratype:
    dtype: pokemontype(enum)
    battle_path: opp_bench1.tera_type.name.lower() if opp_bench1 and opp_bench1.tera_type
      else "none"
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  opp_bench1_primary_type:
    dtype: pokemontype(enum)
    battle_path: opp_bench1.type_1.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  opp_bench1_secondary_type:
    dtype: pokemontype(enum)
    battle_path: opp_bench1.type_2.name.lower() if opp_bench1 and opp_bench1.type_2 else 'none'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
opp_bench2:
  opp_bench2_current_hp_frac:
    dtype: float
    battle_path: opp_bench2.current_hp_fraction
    encoder: identity
    default: '1'
  opp_bench2_is_fainted:
    dtype: bool
    battle_path: opp_bench2.fainted
    encoder: nan
    default: '0'
  opp_bench2_is_terastallized:
    dtype: bool
    battle_path: opp_bench2.is_terastallized
    encoder: identity
    default: '0'
  opp_bench2_is_revealed:
    dtype: bool
    battle_path: opp_bench2.revealed
    encoder: nan
    default: '0'
  opp_bench2_status:
    dtype: optional
    battle_path: opp_bench2.status
    encoder: onehot
    default: '[1.0,0,0,0,0,0,0]'
    classes:
    - none
    - brn
    - fnt
    - frz
    - par
    - psn
    - slp
    - tox
  opp_bench2_teratype:
    dtype: pokemontype(enum)
    battle_path: opp_bench2.tera_type.name.lower() if opp_bench2 and opp_bench2.tera_type
      else "none"
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  opp_bench2_primary_type:
    dtype: pokemontype(enum)
    battle_path: opp_bench2.type_1.name.lower()
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
  opp_bench2_secondary_type:
    dtype: pokemontype(enum)
    battle_path: opp_bench2.type_2.name.lower() if opp_bench2 and opp_bench2.type_2 else 'none'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - bug
    - dark
    - dragon
    - electric
    - fairy
    - fighting
    - fire
    - flying
    - ghost
    - grass
    - ground
    - ice
    - normal
    - poison
    - psychic
    - rock
    - steel
    - stellar
    - three_question_marks
    - water
field:
  weather:
    dtype: weather
    battle_path: list(battle.weather.keys())[0].name.lower() if battle.weather else 'none'
    encoder: onehot
    default: '[1,0,0,0,0,0,0,0,0,0]'
    classes:
    - none
    - desolateland
    - deltastream
    - hail
    - primordilsea
    - raindance
    - sandstorm
    - snow
    - sunnyday
    - unknown
  weather_turn:
    dtype: int
    battle_path: list(battle.weather.values())[0] if battle.weather else 0
    encoder: identity
    default: '0'
meta:
  turn_count:
    dtype: int
    battle_path: battle.turn
    encoder: identity
    default: '0'
  my_remaining_pokemon:
    dtype: int
    battle_path: my_alive_count
    encoder: identity
    default: '3'
  opp_remaining_pokemon:
    dtype: int
    battle_path: opp_alive_count
    encoder: identity
    default: '3'
my_team1:
  my_team1_pokedex_num:
    dtype: int
    battle_path: my_team[0].species_id
    encoder: identity
    default: '0'
my_team2:
  my_team2_pokedex_num:
    dtype: int
    battle_path: my_team[1].species_id
    encoder: identity
    default: '0'
my_team3:
  my_team3_pokedex_num:
    dtype: int
    battle_path: my_team[2].species_id
    encoder: identity
    default: '0'
my_team4:
  my_team4_pokedex_num:
    dtype: int
    battle_path: my_team[3].species_id
    encoder: identity
    default: '0'
my_team5:
  my_team5_pokedex_num:
    dtype: int
    battle_path: my_team[4].species_id
    encoder: identity
    default: '0'
my_team6:
  my_team6_pokedex_num:
    dtype: int
    battle_path: my_team[5].species_id
    encoder: identity
    default: '0'
opp_team1:
  opp_team1_pokedex_num:
    dtype: int
    battle_path: opp_team[0].species_id
    encoder: identity
    default: '0'
opp_team2:
  opp_team2_pokedex_num:
    dtype: int
    battle_path: opp_team[1].species_id
    encoder: identity
    default: '0'
opp_team3:
  opp_team3_pokedex_num:
    dtype: int
    battle_path: opp_team[2].species_id
    encoder: identity
    default: '0'
opp_team4:
  opp_team4_pokedex_num:
    dtype: int
    battle_path: opp_team[3].species_id
    encoder: identity
    default: '0'
opp_team5:
  opp_team5_pokedex_num:
    dtype: int
    battle_path: opp_team[4].species_id
    encoder: identity
    default: '0'
opp_team6:
  opp_team6_pokedex_num:
    dtype: int
    battle_path: opp_team[5].species_id
    encoder: identity
    default: '0'
damage_expectation:
  active_move1_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move1_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move1_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move1_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move1_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move1_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move1_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move1_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move1_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move1_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move1_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move1_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move2_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move2_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move2_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move2_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move2_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move2_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move2_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move2_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move2_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move2_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move2_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move2_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move3_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move3_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move3_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move3_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move3_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move3_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move3_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move3_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move3_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move3_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move3_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move3_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move4_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move4_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move4_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move4_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move4_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move4_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move4_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move4_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move4_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move4_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_move4_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_move4_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
damage_expectation_tera:
  active_tera_move1_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move1_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move2_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move3_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[0], my_active.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[1], my_active.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[2], my_active.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[3], my_active.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[4], my_active.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  active_tera_move4_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_active, opp_team[5], my_active.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
damage_expectation_bench1:
  bench1_move1_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move1_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move2_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move3_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_move4_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
damage_expectation_bench1_tera:
  bench1_tera_move1_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move1_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move2_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move3_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[0], my_bench1.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[1], my_bench1.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[2], my_bench1.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[3], my_bench1.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[4], my_bench1.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench1_tera_move4_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench1, opp_team[5], my_bench1.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
damage_expectation_bench2:
  bench2_move1_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[0])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move1_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[0])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[1])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move2_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[1])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[2])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move3_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[2])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[3])[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_move4_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[3])[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
damage_expectation_bench2_tera:
  bench2_tera_move1_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[0],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move1_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[0],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[1],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move2_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[1],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[2],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move3_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[2],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp1_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp1_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[0], my_bench2.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp2_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp2_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[1], my_bench2.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp3_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp3_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[2], my_bench2.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp4_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp4_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[3], my_bench2.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp5_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp5_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[4], my_bench2.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp6_expected:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[3],
      terastallized=True)[0]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 200
    scale_to:
    - 0
    - 1
  bench2_tera_move4_to_opp6_variance:
    dtype: float
    battle_path: calc_damage_expectation_for_ai(my_bench2, opp_team[5], my_bench2.moves[3],
      terastallized=True)[1]
    encoder: linear_scale
    default: '0'
    range:
    - 0
    - 30
    scale_to:
    - 0
    - 1
