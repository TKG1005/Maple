#!/bin/bash

# Pokemon Showdown Server Management Utility
# Simple wrapper for managing multiple Pokemon Showdown servers

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

show_help() {
    echo -e "${BLUE}🎮 Pokemon Showdown Server Management Utility${NC}"
    echo ""
    echo "Usage: $0 <command> [arguments]"
    echo ""
    echo "Commands:"
    echo -e "  ${GREEN}start [num] [port]${NC}     Start servers (default: 5 servers from port 8000)"
    echo -e "  ${RED}stop [start] [end]${NC}      Stop servers in port range (default: 8000-8010)"
    echo -e "  ${YELLOW}status [start] [end]${NC}    Check server status (default: 8000-8010)"
    echo -e "  ${BLUE}restart [num] [port]${NC}    Restart servers (default: 5 servers from port 8000)"
    echo -e "  ${BLUE}quick${NC}                   Quick start with train_config.yml settings"
    echo -e "  ${BLUE}logs [port]${NC}             Show logs for specific port (default: all recent)"
    echo -e "  ${BLUE}help${NC}                    Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 start 5 8000          # Start 5 servers on ports 8000-8004"
    echo "  $0 stop                  # Stop all servers"
    echo "  $0 status               # Check status of all servers"
    echo "  $0 restart 3 8000       # Restart 3 servers on ports 8000-8002"
    echo "  $0 quick                # Start servers based on train_config.yml"
    echo "  $0 logs 8001            # Show logs for server on port 8001"
    echo ""
}

show_logs() {
    local port=$1
    local logs_dir="$(dirname "$SCRIPT_DIR")/logs/showdown_logs"
    
    if [ -n "$port" ]; then
        local log_file="$logs_dir/showdown_server_${port}.log"
        if [ -f "$log_file" ]; then
            echo -e "${BLUE}📋 Showing logs for port $port:${NC}"
            echo "─────────────────────────────────────────────────────────────"
            tail -50 "$log_file"
        else
            echo -e "${RED}❌ Log file not found: $log_file${NC}"
        fi
    else
        echo -e "${BLUE}📋 Showing recent logs from all servers:${NC}"
        echo "─────────────────────────────────────────────────────────────"
        if [ -d "$logs_dir" ]; then
            local log_files=$(find "$logs_dir" -name "showdown_server_*.log" -type f | sort)
            if [ -n "$log_files" ]; then
                echo "$log_files" | while read -r log_file; do
                    local filename=$(basename "$log_file")
                    local port=$(echo "$filename" | grep -o '[0-9]\+')
                    echo -e "${YELLOW}=== Port $port ===${NC}"
                    tail -10 "$log_file"
                    echo ""
                done
            else
                echo -e "${YELLOW}ℹ️  No log files found${NC}"
            fi
        else
            echo -e "${YELLOW}ℹ️  Log directory does not exist${NC}"
        fi
    fi
}

quick_start() {
    echo -e "${BLUE}🚀 Quick Start: Reading configuration from train_config.yml${NC}"
    
    local config_file="$(dirname "$SCRIPT_DIR")/config/train_config.yml"
    if [ ! -f "$config_file" ]; then
        echo -e "${RED}❌ train_config.yml not found at: $config_file${NC}"
        exit 1
    fi
    
    # Extract server information from YAML (simple grep-based parsing)
    local server_count=$(grep -A 20 "pokemon_showdown:" "$config_file" | grep -c "port:" || echo "0")
    local first_port=$(grep -A 20 "pokemon_showdown:" "$config_file" | grep "port:" | head -1 | grep -o '[0-9]\+' || echo "8000")
    
    if [ "$server_count" -eq 0 ]; then
        echo -e "${YELLOW}⚠️  No servers configured in train_config.yml, using defaults${NC}"
        server_count=5
        first_port=8000
    fi
    
    echo -e "${GREEN}📋 Configuration detected:${NC}"
    echo "   Servers: $server_count"
    echo "   Starting port: $first_port"
    echo ""
    
    "$SCRIPT_DIR/start_showdown_servers.sh" "$server_count" "$first_port"
}

# Parse command
case "$1" in
    "start")
        "$SCRIPT_DIR/start_showdown_servers.sh" "$2" "$3"
        ;;
    "stop")
        "$SCRIPT_DIR/stop_showdown_servers.sh" "$2" "$3"
        ;;
    "status")
        "$SCRIPT_DIR/status_showdown_servers.sh" "$2" "$3"
        ;;
    "restart")
        "$SCRIPT_DIR/restart_showdown_servers.sh" "$2" "$3"
        ;;
    "quick")
        quick_start
        ;;
    "logs")
        show_logs "$2"
        ;;
    "help"|"--help"|"-h"|"")
        show_help
        ;;
    *)
        echo -e "${RED}❌ Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac